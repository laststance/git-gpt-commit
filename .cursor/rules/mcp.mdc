---
description:
globs:
alwaysApply: false
---
# MCP Architecture

The Model-Controller-Protocol (MCP) architecture is a communication standard used by Task Master to facilitate integration with AI assistants and IDEs like Cursor.

## Overview

- **Standardized Interface**: MCP defines a consistent API surface for tools to interact with Task Master
- **Enhanced Performance**: Direct function calls provide better performance than CLI parsing
- **Rich Error Handling**: Structured error responses with detailed context
- **Bi-directional Communication**: Tools can return structured data objects

## MCP Server

The MCP server exposes Task Master functionality through a set of standardized tools that can be called by AI assistants or other integrated development environments. These tools provide the same functionality as the CLI commands but with a more structured interface.

## Key Benefits of MCP Tools

- **Direct Function Execution**: Bypasses CLI parsing overhead
- **Structured Data Exchange**: Returns properly formatted JSON objects
- **Better Error Handling**: Provides detailed error information
- **Richer Context**: Can include additional metadata

## MCP vs CLI Usage

When to use MCP tools vs. CLI commands:

- **Use MCP tools when**:
  - Working with AI assistants like Cursor AI
  - Building integrations with Task Master
  - Performance and structured data are important
  - Error handling needs detailed context

- **Use CLI commands when**:
  - Working directly in the terminal
  - MCP server is unavailable
  - Building simple scripts
  - Human-readable output is preferred

## MCP Tool Structure

Each MCP tool follows a consistent structure:
- `name`: The function name to be called
- `parameters`: A structured object of parameters
- `return`: A structured response with result and metadata

For a complete list of available MCP tools and their CLI equivalents, see [taskmaster.mdc](mdc:.cursor/rules/taskmaster.mdc).

## Configuration for MCP

To use MCP tools with Cursor:

1. Ensure the API keys for your AI providers are in the `env` section of `.cursor/mcp.json`
2. Restart the MCP server if core Task Master logic changes
3. MCP tools read configuration from the `.taskmasterconfig` file in the project root

---

*For more detailed information on using individual MCP tools, refer to the [Task Master Development Workflow Guide](mdc:.cursor/rules/dev_workflow.mdc).*
